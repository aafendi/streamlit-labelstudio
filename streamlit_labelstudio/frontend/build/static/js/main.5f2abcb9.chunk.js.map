{"version":3,"sources":["index.tsx"],"names":["document","body","appendChild","createElement","setAttribute","Streamlit","events","addEventListener","RENDER_EVENT","event","data","detail","LabelStudio","config","args","interfaces","user","task","onLabelStudioLoad","ls","c","completionStore","addCompletion","userGenerate","selectCompletion","id","onSubmitCompletion","completion","console","log","JSON","parse","stringify","setComponentValue","setFrameHeight","setComponentReady"],"mappings":"gKAAA,+BAIaA,SAASC,KAAKC,YAAYF,SAASG,cAAc,SAC1CD,YAAYF,SAASG,cAAc,QAChDC,aAAa,KAAM,gBA2C1BC,IAAUC,OAAOC,iBAAiBF,IAAUG,cAlC5C,SAAkBC,GAChB,IAAMC,EAAQD,EAAkCE,OAEvC,IAAIC,cAAY,eAAgB,CACvCC,OAAQH,EAAKI,KAAL,OACRC,WAAYL,EAAKI,KAAL,WAAwB,GACpCE,KAAMN,EAAKI,KAAL,KAAkB,GACxBG,KAAMP,EAAKI,KAAL,KAENI,kBAAmB,SAASC,GAC1B,IAAIC,EAAID,EAAGE,gBAAgBC,cAAc,CACvCC,cAAc,IAEhBJ,EAAGE,gBAAgBG,iBAAiBJ,EAAEK,KAGxCC,mBAAoB,SAASP,EAAIQ,GAC/BC,QAAQC,IAAIV,GACZQ,EAAaG,KAAKC,MAAMD,KAAKE,UAAUL,IACvCtB,IAAU4B,kBAAkBN,MAUhCtB,IAAU6B,oBAQZ7B,IAAU8B,oBAIV9B,IAAU6B,mB","file":"static/js/main.5f2abcb9.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\r\nimport {LabelStudio} from 'label-studio';\r\nimport 'label-studio/build/static/css/main.css';\r\n\r\nconst span = document.body.appendChild(document.createElement(\"span\"))\r\nconst ls_div = span.appendChild(document.createElement(\"div\"))\r\nls_div.setAttribute(\"id\", \"label-studio\");\r\n\r\n\r\n\r\n/**\r\n * The component's render function. This will be called immediately after\r\n * the component is initially loaded, and then again every time the\r\n * component gets new data from Python.\r\n */\r\nfunction onRender(event: Event): void {\r\n  const data = (event as CustomEvent<RenderData>).detail\r\n  \r\n  var ls = new LabelStudio('label-studio', {\r\n    config: data.args[\"config\"],\r\n    interfaces: data.args[\"interfaces\"][0],\r\n    user: data.args[\"user\"][0],\r\n    task: data.args[\"task\"],\r\n    \r\n    onLabelStudioLoad: function(ls) {\r\n      var c = ls.completionStore.addCompletion({\r\n        userGenerate: true\r\n      });\r\n      ls.completionStore.selectCompletion(c.id);\r\n    },\r\n    \r\n    onSubmitCompletion: function(ls, completion) {\r\n      console.log(ls)\r\n      completion = JSON.parse(JSON.stringify(completion));\r\n      Streamlit.setComponentValue(completion)\r\n    },\r\n    \r\n    \r\n  });\r\n  \r\n  // We tell Streamlit to update our frameHeight after each render event, in\r\n  // case it has changed. (This isn't strictly necessary for the example\r\n  // because our height stays fixed, but this is a low-cost function, so\r\n  // there's no harm in doing it redundantly.)\r\n  Streamlit.setFrameHeight()\r\n}\r\n\r\n\r\n// Attach our `onRender` handler to Streamlit's render event.\r\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\r\n// Tell Streamlit we're ready to start receiving data. We won't get our\r\n// first RENDER_EVENT until we call this function.\r\nStreamlit.setComponentReady()\r\n\r\n// Finally, tell Streamlit to update our initial height. We omit the\r\n// `height` parameter here to have it default to our scrollHeight.\r\nStreamlit.setFrameHeight()\r\n"],"sourceRoot":""}